@PACKAGE_INIT@

include(CMakeFindDependencyMacro)


##############################################################
# Debug prints
##############################################################

message("CMAKE_PREFIX_PATH: ${CMAKE_PREFIX_PATH}")


##############################################################
# CMake modules and macro files
##############################################################

list(APPEND CMAKE_MODULE_PATH
  "${CMAKE_CURRENT_LIST_DIR}/cmake"
)
include("configure_boost")
include("configure_loki")

##############################################################
# Dependency Handling
##############################################################

# -----
# Boost
# -----

# Find Boost headers only according to https://cmake.org/cmake/help/latest/module/FindBoost.html
configure_boost()
find_dependency(Boost ${BOOST_MIN_VERSION} REQUIRED COMPONENTS iostreams PATHS ${CMAKE_PREFIX_PATH} NO_DEFAULT_PATH)
if(Boost_FOUND)
  message(STATUS "Found Boost: ${Boost_DIR} (found version ${Boost_VERSION})")
endif()


# -----
# Threads (pthreads)
# -----

# Prefer -pthread over -lpthread where applicable
set(THREADS_PREFER_PTHREAD_FLAG ON)

find_dependency(Threads REQUIRED)
if(Threads_FOUND)
  message(STATUS "Found Threads (pthreads)")
endif()


# -----
# Fmt
# -----

find_dependency(fmt REQUIRED)
if(fmt_FOUND)
  message(STATUS "Found fmt: ${fmt_DIR} (found version ${fmt_VERSION})")
endif()


# ----
# Loki
# ----

find_dependency(loki ${LOKI_MIN_VERSION} COMPONENTS parsers REQUIRED PATHS ${CMAKE_PREFIX_PATH} NO_DEFAULT_PATH)


# -----------
# Nauty
# -----------

find_dependency(Nauty REQUIRED)
if(Nauty_FOUND)
  message(STATUS "Found Nauty: ${NAUTY_LIBRARY} ${NAUTY_INCLUDE_DIR}")
endif()


# -----------
# abseil
# -----------

find_dependency(absl CONFIG REQUIRED PATHS ${CMAKE_PREFIX_PATH} NO_DEFAULT_PATH)
if(absl_FOUND)
  message(STATUS "Found absl: ${absl_DIR} (found version ${absl_VERSION})")
endif()


# -----------
# argparse
# -----------

find_dependency(argparse CONFIG REQUIRED PATHS ${CMAKE_PREFIX_PATH} NO_DEFAULT_PATH)
if(argparse_FOUND)
  message(STATUS "Found argparse: ${argparse_DIR} (found version ${argparse_VERSION})")
endif()


# -----------
# TBB
# -----------

find_dependency(TBB CONFIG REQUIRED PATHS ${CMAKE_PREFIX_PATH} NO_DEFAULT_PATH)
if(TBB_FOUND)
  include_directories(${TBB_INCLUDE_DIRS})
  message(STATUS "Found TBB: ${TBB_DIR} (found version ${TBB_VERSION})")
endif()


# -----------
# valla
# -----------

find_dependency(valla CONFIG COMPONENTS core REQUIRED PATHS ${CMAKE_PREFIX_PATH} NO_DEFAULT_PATH)
if(valla_FOUND)
  message(STATUS "Found valla: ${valla_DIR} (found version ${valla_VERSION})")
endif()


############
# Components
############

set(_mimir_supported_components core)

foreach(_comp ${mimir_FIND_COMPONENTS})
  if (NOT _comp IN_LIST _mimir_supported_components)
    set(mimir_FOUND False)
    set(mimir_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
  endif()
  include("${CMAKE_CURRENT_LIST_DIR}/mimir${_comp}Targets.cmake")
endforeach()

get_filename_component(MIMIR_CONFIG_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
message(STATUS "Found mimir: ${MIMIR_CONFIG_DIR} (found version ${mimir_VERSION})")